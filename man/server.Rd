% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/server.R, R/session.R
\name{mcp_server}
\alias{mcp_server}
\alias{server}
\alias{mcp_session}
\title{R as a server: Configure R-based tools with LLM-enabled apps}
\usage{
mcp_server(tools = NULL)

mcp_session()
}
\arguments{
\item{tools}{A list of tools created with \code{\link[ellmer:tool]{ellmer::tool()}} that will be
available from the server or a file path to an .R file that, when sourced,
will return a list of tools. Any list that could be passed to
\code{Chat$set_tools()} can be passed here. By default, the package won't serve
any tools other than those needed to communicate with active R sessions.}
}
\description{
Together, these functions implement a model context protocol server for your
R session.
}
\section{Configuration}{


\code{\link[=mcp_server]{mcp_server()}} should be configured with the MCP clients via the \code{Rscript}
command. For example, to use with Claude Desktop, paste the following in your
Claude Desktop configuration (on macOS, at
\code{file.edit("~/Library/Application Support/Claude/claude_desktop_config.json")}):

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "mcpServers": \{
    "r-mcptools": \{
      "command": "Rscript",
      "args": ["-e", "mcptools::mcp_server()"]
    \}
  \}
\}
}\if{html}{\out{</div>}}

Or, to use with Claude Code, you might type in a terminal:

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{claude mcp add -s "user" r-mcptools Rscript -e "mcptools::mcp_server()"
}\if{html}{\out{</div>}}

\strong{mcp_server() is not intended for interactive use.}

The server interfaces with the MCP client on behalf of your R session.
\strong{Use \code{\link[=mcp_session]{mcp_session()}} to make your R session available to the server.}
Place a call to \code{mcptools::mcp_session()} in your \code{.Rprofile}, perhaps with
\code{usethis::edit_r_profile()}, to make every interactive R session you start
available to the server.
}

\examples{
# should only be run non-interactively, and will block the current R process
# once called.
if (FALSE) {
# to start a server with a tool to draw numbers from a random normal:
library(ellmer)

tool_rnorm <- tool(
  rnorm,
  "Draw numbers from a random normal distribution",
  n = type_integer("The number of observations. Must be a positive integer."),
  mean = type_number("The mean value of the distribution."),
  sd = type_number("The standard deviation of the distribution. Must be a non-negative number.")
)

mcp_server(tools = list(tool_rnorm))

# can also supply a file path as `tools`
readLines(system.file("example-ellmer-tools.R", package = "mcptools"))

mcp_server(tools = system.file("example-ellmer-tools.R", package = "mcptools"))
}
if (interactive()) {
mcp_session()
}

}
\seealso{
\itemize{
\item The "R as an MCP server" vignette at
\code{vignette("server", package = "mcptools")} delves into further detail
on setup and customization.
\item These functions implement R as an MCP \emph{server}. To use R as an MCP \emph{client},
i.e. to configure tools from third-party MCP servers with ellmer chats, see
\code{\link[=mcp_tools]{mcp_tools()}}.
}
}
